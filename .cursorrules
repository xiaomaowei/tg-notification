# 原有规则
# Python 脚本应用 CursorRules 文档

本文档旨在为开发 Python 脚本应用提供详细的规则和指南，确保项目在开发、测试、部署等各阶段均符合最佳实践。本文件中的"*"占位符已被替换为实际的信息和技术栈内容。

## 1. 项目概述

- **项目名称:** Python 自动化数据处理应用
- **描述:** 一个用于自动化数据采集、处理与报告生成的 Python 脚本应用，支持多平台运行并集成完善的日志记录和错误处理机制。

---

## 2. 开发环境

- **Python 版本:** Python 3.10
- **操作系统支持:** Windows、macOS、Linux
- **虚拟环境管理:** 使用 `mamba` 来管理项目依赖，确保环境隔离
- **本地测试环境:** 本项目Python环境管理使用conda，禁止在本地进行测试，所有测试都將由用戶在測試服務器上完成中完成

---

## 3. 依赖管理与技术栈

- **包管理工具:** 
  - 使用 `pip` 管理依赖，并通过 `requirements.txt` 文件锁定版本
  - 可选：采用 [mamba](https://github.com/mamba-org/mamba) 进行依赖管理与打包
  - 可选：采用 [Poetry](https://python-poetry.org/) 进行依赖管理与打包

- **主要依赖库:**
  - **数据处理:** `numpy`、`pandas`
  - **网络请求:** `requests`
  - **配置管理:** `python-dotenv`
  - **日志记录:** Python 内置 `logging` 模块（可扩展使用 `loguru`）
  - **测试:** `pytest`、`coverage`
  - **代码格式化:** `black`
  - **静态代码检查:** `flake8`、`mypy`

---

## 4. 代码规范与最佳实践

- **编码风格:** 遵循 [PEP 8](https://www.python.org/dev/peps/pep-0008/) 标准
- **格式化工具:** 使用 [Black](https://black.readthedocs.io/en/stable/) 自动格式化代码
- **静态检查:** 
  - 使用 [Flake8](https://flake8.pycqa.org/) 检查代码风格
  - 使用 [MyPy](http://mypy-lang.org/) 进行类型检查
- **注释与文档:** 
  - 采用 Google 风格或 reStructuredText 格式的 Docstring
  - 为关键逻辑和复杂模块添加详细注释

---

## 5. 版本控制

- **版本控制系统:** Git
- **代码托管平台:** GitHub 或 GitLab
- **分支策略:** 
  - 采用 Git Flow 或 Trunk Based Development 模型
  - 主要分支：`main`（稳定版）、`develop`（开发中）、功能分支（feature/*）
- **提交规范:** 遵循 [Conventional Commits](https://www.conventionalcommits.org/) 规范，确保提交信息清晰、可追溯

---

## 6. 测试策略

- **测试框架:** 使用 `pytest` 进行单元测试与集成测试
- **测试覆盖率:** 借助 `coverage` 工具确保至少 80% 的代码覆盖率
- **持续集成:** 
  - 配置 GitHub Actions 或 GitLab CI 自动运行测试、代码检查和静态分析
  - 触发条件：每次提交、Pull Request 创建或合并

---

## 7. 部署与运行

- **打包工具:** 
  - 对于分发成可执行文件，可采用 [PyInstaller](https://pyinstaller.org/) 或 [cx_Freeze](https://cx-freeze.readthedocs.io/)
- **部署平台:** 
  - 支持在云服务器（如 AWS、GCP、Azure）或内部服务器上部署
  - 根据需求选择容器化部署（Docker）方式
- **运行方式:** 
  - 可通过定时任务（如 cron 作业）自动执行
  - 提供命令行界面（CLI）支持手动执行
- **日志管理:** 
  - 利用 Python 的 `loguru` 模块，配置 INFO、DEBUG、ERROR 等不同日志级别
  - 日志输出到文件和/或远程日志服务器

---

## 8. 安全性与错误处理

- **错误处理:** 
  - 使用 try/except 块捕获异常，确保程序稳健运行
  - 对于严重错误，记录详细日志并通知维护者
- **安全措施:** 
  - 定期更新依赖库，避免已知漏洞
  - 使用 [safety](https://pyup.io/safety/) 工具检查依赖库的安全性
- **敏感信息管理:** 
  - 避免在代码中硬编码敏感信息
  - 使用环境变量或 `.env` 、`yml`等文件管理 API 密钥、数据库密码等

---

## 9. 文档与用户支持

- **项目文档:** 
  - 使用 [Sphinx](https://www.sphinx-doc.org/) 自动生成代码文档
  - 在 GitHub Wiki 或独立网站上提供用户使用手册
- **注释:** 
  - 关键模块、函数和类均需添加详细的文档字符串
  - 代码中的复杂逻辑需提供额外的注释说明
- **示例与教程:** 
  - 提供常见使用场景的示例代码
  - 编写详细的 README 文件，说明项目架构、安装、使用和常见问题

---

## 10. 许可证

- **开源许可证:** 
  - 根据项目需求选择适合的开源许可证，如 MIT License 或 Apache License 2.0
  - 在项目根目录提供 LICENSE 文件，明确授权条款

---

## 11. 联系与维护

- **维护者:** Denis Wei
- **电子邮件:** kawamao@gmail.com
- **项目主页:** [hhttps://github.com/xiaomaowei/tg-notification](https://github.com/xiaomaowei/tg-notification)
- **问题反馈:** 
  - 请通过 GitHub Issues 提交 Bug 或功能请求
  - 定期检查并回复用户反馈，保持项目活跃

---

## 12. 附录

### 12.1 开发工具

- **编辑器/IDE:** Visual Studio Code、PyCharm
- **调试工具:** 内置 `pdb` 调试器、VS Code Debugger

### 12.2 开发流程

1. **需求分析:** 确定功能需求及技术选型
2. **设计:** 制定模块划分、接口设计和数据流图
3. **开发:** 编写代码并遵循代码规范
4. **测试:** 单元测试、集成测试及自动化测试
5. **代码评审:** 通过 Pull Request 进行代码审核
6. **部署:** 自动化 CI/CD 管道完成部署
7. **维护:** 定期更新文档、修复 Bug 和优化性能

### 12.3 未来改进方向

- 引入更多数据处理和可视化库（如 `matplotlib`、`seaborn`）
- 完善异常上报和监控机制（如集成 Sentry）
- 支持更灵活的插件机制，便于扩展功能
- 优化算法性能，提高处理大规模数据时的效率

---

本 CursorRules 文档为开发团队提供了完整的技术栈、开发流程和最佳实践指南，确保项目在整个生命周期中具有高质量、可维护和安全可靠的特点。

## 开发流程行为规范（适用于 Cursor 插件）

所有开发行为应遵循以下要求：

永远使用中文回答。  
请先复述一遍我的需求，先不要修改代码，确保你真正理解我的需求。  
所有修改必须严格遵循 `cursor_project_rules` 文件夹中的内容，不得脱离上下文进行任何开发。  
功能开发必须严格按照 `implementation-plan.mdc` 中的步骤顺序执行，每完成一项需在文档中标记为 *Done* 并写下两行简要说明。  
修改必须逐文件提交，便于用户检查。  
每个文件修改应一次性提交完整内容，不得分段。  
禁止道歉。  
禁止使用“我理解……”等语言反馈。  
禁止建议空白字符调整。  
禁止总结除非用户明确要求。  
禁止无依据的修改。  
禁止重复确认已给出的信息。  
必须保留所有现有代码结构，不得擅自删除无关功能。  
提供真实文件链接，不得使用上下文生成版本链接。  
所有变量应具描述性，避免使用模糊缩写。  
必须遵循项目现有编码风格。  
优先考虑性能与安全性。  
必须考虑边界条件并加入断言。  
所有代码必须具有错误处理与日志记录。  
新增或修改功能应附带合理的测试。  
禁止在本地进行测试，所有测试必须在标准化环境中完成。